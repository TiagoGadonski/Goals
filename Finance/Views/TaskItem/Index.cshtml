@model IEnumerable<Finance.Models.TaskItem>

@{
    ViewData["Title"] = "Tasks";
    var columns = ViewBag.Columns as List<Finance.Models.Column>;
    var categories = ViewBag.Categories as List<Finance.Models.Category>;
}

<div class="container-fluid p-0">
    <a href="#" class="btn btn-primary float-end mt-n1" id="create-task-button"><i class="fas fa-plus"></i> New task</a>
    <a href="#" class="btn btn-secondary float-end mt-n1 me-2" id="create-column-button"><i class="fas fa-plus"></i> New column</a>
    <a href="#" class="btn btn-secondary float-end mt-n1 me-2" id="create-category-button"><i class="fas fa-plus"></i> New category</a>
    <div class="mb-3">
        <h1 class="h3 d-inline align-middle">Tasks</h1>
    </div>

    <div class="row">
        @foreach (var column in columns)
        {
            <div class="col-12 col-lg-6 col-xl-4">
                <div class="card">
                    <div class="card-header">
                        <div class="card-actions float-end">
                            <div class="dropdown position-relative">
                                <a href="#" data-bs-toggle="dropdown" data-bs-display="static">
                                    <i class="align-middle" data-feather="more-horizontal"></i>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end">
                                    <a class="dropdown-item edit-column-button" href="#" data-column-id="@column.Id" data-column-title="@column.Title">Edit</a>
                                    <a class="dropdown-item delete-column-button" href="#" data-column-id="@column.Id">Delete</a>
                                </div>
                            </div>
                        </div>
                        <h5 class="card-title">@column.Title</h5>
                        <h6 class="card-subtitle text-muted">Tasks under @column.Title</h6>
                    </div>
                    <div class="card-body" id="column-@column.Id">
                        @foreach (var task in Model.Where(t => t.ColumnId == column.Id))
                        {
                            <div class="card mb-3 bg-light cursor-grab border task-item" data-task-id="@task.Id" draggable="true">
                                <div class="card-body p-3">
                                    <div class="float-end me-n2">
                                        <button class="btn btn-sm btn-danger delete-task-button" data-task-id="@task.Id">Delete</button>
                                    </div>
                                    <h5 class="card-title">@task.Title</h5>
                                    <p class="card-text">@task.Description</p>
                                    <a href="#" class="btn btn-sm btn-primary edit-task-button" data-task-id="@task.Id">Edit</a>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary btn-sm add-task-button" data-column-id="@column.Id">Add new task</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal for creating/editing task -->
<div class="modal fade" id="task-modal" tabindex="-1" aria-labelledby="task-modal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="task-modal-label">Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="task-form">
                    <input type="hidden" id="task-id">
                    <input type="hidden" id="task-column-id">
                    <div class="mb-3">
                        <label for="task-title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="task-title" required>
                    </div>
                    <div class="mb-3">
                        <label for="task-description" class="form-label">Description</label>
                        <textarea class="form-control" id="task-description" rows="3" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="task-category" class="form-label">Category</label>
                        <select class="form-control" id="task-category">
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal for creating/editing column -->
<div class="modal fade" id="column-modal" tabindex="-1" aria-labelledby="column-modal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="column-modal-label">Column</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="column-form">
                    <input type="hidden" id="column-id">
                    <div class="mb-3">
                        <label for="column-title" class="form-label">Title</label>
                        <input type="text" class="form-control" id="column-title" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal for creating/editing category -->
<div class="modal fade" id="category-modal" tabindex="-1" aria-labelledby="category-modal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="category-modal-label">Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="category-form">
                    <input type="hidden" id="category-id">
                    <div class="mb-3">
                        <label for="category-name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="category-name" required>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            // Show modal for creating new task
            $('#create-task-button, .add-task-button').on('click', function () {
                $('#task-form')[0].reset();
                $('#task-id').val('');
                $('#task-column-id').val($(this).data('column-id'));
                $('#task-modal').modal('show');
            });

            // Show modal for creating new column
            $('#create-column-button').on('click', function () {
                $('#column-form')[0].reset();
                $('#column-id').val('');
                $('#column-modal').modal('show');
            });

            // Show modal for editing column
            $('.edit-column-button').on('click', function () {
                const columnId = $(this).data('column-id');
                const columnTitle = $(this).data('column-title');
                $('#column-id').val(columnId);
                $('#column-title').val(columnTitle);
                $('#column-modal').modal('show');
            });

            // Handle form submission for creating/editing column
            $('#column-form').on('submit', function (e) {
                e.preventDefault();
                const column = {
                    Id: $('#column-id').val() ? parseInt($('#column-id').val()) : 0,
                    Title: $('#column-title').val()
                };
                const url = column.Id ? '/Column/Edit' : '/Column/Create';
                const method = column.Id ? 'PUT' : 'POST';
                $.ajax({
                    url: url,
                    method: method,
                    contentType: 'application/json',
                    data: JSON.stringify(column),
                    success: function (data) {
                        location.reload();
                    },
                    error: function (error) {
                        alert('Error: ' + error.responseText);
                    }
                });
            });

            // Handle column deletion
            $('.delete-column-button').on('click', function () {
                const columnId = $(this).data('column-id');
                if (confirm('Are you sure you want to delete this column?')) {
                    $.ajax({
                        url: `/Column/Delete/${columnId}`,
                        method: 'DELETE',
                        success: function (data) {
                            location.reload();
                        },
                        error: function (error) {
                            alert('Error: ' + error.responseText);
                        }
                    });
                }
            });

            // Show modal for creating new category
            $('#create-category-button').on('click', function () {
                $('#category-form')[0].reset();
                $('#category-id').val('');
                $('#category-modal').modal('show');
            });

            // Show modal for editing category
            $('.edit-category-button').on('click', function () {
                const categoryId = $(this).data('category-id');
                const categoryName = $(this).data('category-name');
                $('#category-id').val(categoryId);
                $('#category-name').val(categoryName);
                $('#category-modal').modal('show');
            });

            // Handle form submission for creating/editing category
            $('#category-form').on('submit', function (e) {
                e.preventDefault();
                const category = {
                    Id: $('#category-id').val() ? parseInt($('#category-id').val()) : 0,
                    Name: $('#category-name').val()
                };
                const url = category.Id ? '/Category/Edit' : '/Category/Create';
                const method = category.Id ? 'PUT' : 'POST';
                $.ajax({
                    url: url,
                    method: method,
                    contentType: 'application/json',
                    data: JSON.stringify(category),
                    success: function (data) {
                        location.reload();
                    },
                    error: function (error) {
                        alert('Error: ' + error.responseText);
                    }
                });
            });

            // Handle category deletion
            $('.delete-category-button').on('click', function () {
                const categoryId = $(this).data('category-id');
                if (confirm('Are you sure you want to delete this category?')) {
                    $.ajax({
                        url: `/Category/Delete/${categoryId}`,
                        method: 'DELETE',
                        success: function (data) {
                            location.reload();
                        },
                        error: function (error) {
                            alert('Error: ' + error.responseText);
                        }
                    });
                }
            });

            // Show modal for editing task
            $('.edit-task-button').on('click', function () {
                const taskId = $(this).data('task-id');
                $.get(`/TaskItem/Edit/${taskId}`, function (data) {
                    $('#task-id').val(data.id);
                    $('#task-title').val(data.title);
                    $('#task-description').val(data.description);
                    $('#task-category').val(data.categoryId);
                    $('#task-column-id').val(data.columnId);
                    $('#task-modal').modal('show');
                });
            });

            // Handle form submission for creating/editing task
            $('#task-form').on('submit', function (e) {
                e.preventDefault();
                const task = {
                    Id: $('#task-id').val() ? parseInt($('#task-id').val()) : 0,
                    Title: $('#task-title').val(),
                    Description: $('#task-description').val(),
                    ColumnId: parseInt($('#task-column-id').val()),
                    CategoryId: parseInt($('#task-category').val()),
                    UserId: '', // Você pode preencher com o ID do usuário autenticado
                    Date: new Date().toISOString(),
                    Tag: '', // Adicione a lógica para capturar a tag se necessário
                    CreatedBy: '' // Adicione a lógica para capturar o criador se necessário
                };
                const url = task.Id ? '/TaskItem/Edit' : '/TaskItem/Create';
                const method = task.Id ? 'PUT' : 'POST';
                $.ajax({
                    url: url,
                    method: method,
                    contentType: 'application/json',
                    data: JSON.stringify(task),
                    success: function (data) {
                        location.reload();
                    },
                    error: function (error) {
                        alert('Error: ' + error.responseText);
                    }
                });
            });

            // Handle task deletion
            $('.delete-task-button').on('click', function () {
                const taskId = $(this).data('task-id');
                if (confirm('Are you sure you want to delete this task?')) {
                    $.ajax({
                        url: `/TaskItem/Delete/${taskId}`,
                        method: 'DELETE',
                        success: function (data) {
                            location.reload();
                        },
                        error: function (error) {
                            alert('Error: ' + error.responseText);
                        }
                    });
                }
            });

            // Drag and Drop functionality
            $('.task-item').on('dragstart', function (e) {
                e.originalEvent.dataTransfer.setData('taskId', $(this).data('task-id'));
            });

            $('.card-body').on('dragover', function (e) {
                e.preventDefault();
            });

            $('.card-body').on('drop', function (e) {
                e.preventDefault();
                const taskId = e.originalEvent.dataTransfer.getData('taskId');
                const columnId = $(this).attr('id').split('-')[1];

                $.ajax({
                    url: '/TaskItem/Edit',
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify({ Id: parseInt(taskId), ColumnId: parseInt(columnId) }),
                    success: function (data) {
                        location.reload();
                    },
                    error: function (error) {
                        alert('Error: ' + error.responseText);
                    }
                });
            });
        });
    </script>
}
